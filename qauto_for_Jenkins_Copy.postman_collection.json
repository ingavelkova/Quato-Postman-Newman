{
	"info": {
		"_postman_id": "016355f0-ae4a-4e24-83b0-28401b464f03",
		"name": "qauto for Jenkins Copy",
		"description": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3067319"
	},
	"item": [
		{
			"name": "Validation tests for fields Name",
			"item": [
				{
					"name": "field Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"let requestData = pm.request.body;\r",
									"let parsedRequest = JSON.parse(requestData);\r",
									"let name = parsedRequest.name;\r",
									"let expectedErrorMessage = \"\";\r",
									"\r",
									"if (!name || name.length === 0) {\r",
									"    expectedErrorMessage = '\"name\" is not allowed to be empty';\r",
									"} else if (name && (name.length < 2 || name.length > 20)) {\r",
									"    expectedErrorMessage = 'Name has to be from 2 to 20 characters long';\r",
									"} else if (name && !/^[A-Za-z]+$/.test(name)) {\r",
									"    expectedErrorMessage = 'Name is invalid';\r",
									"}\r",
									"\r",
									"if (pm.response.code === 400) {\r",
									"    pm.test(\"Response contains correct error message\", () => {\r",
									"        pm.expect(responseData).to.have.property(\"message\");\r",
									"        pm.expect(responseData.message).to.eql(expectedErrorMessage);\r",
									"        console.log(responseData.message)\r",
									"    });\r",
									"  \r",
									"}\r",
									"\r",
									"pm.environment.set(\"userName\", null);\r",
									"pm.environment.set(\"userLastName\", null);\r",
									"pm.environment.set(\"email\", null);\r",
									"pm.environment.set(\"password\", null);\r",
									"\r",
									"const environments = [\"Dev\", \"Production\"];\r",
									"let indexCurrent = parseInt(pm.environment.get(\"indexEnv\") || 0);\r",
									"\r",
									"if (indexCurrent < environments.length - 1) {\r",
									"    let indexNext = indexCurrent + 1;\r",
									"    pm.environment.set(\"indexEnv\", indexNext);\r",
									"    pm.environment.set(\"envCurrent\", environments[indexNext]);\r",
									"\r",
									"    console.log(\"Середовище змінено на:\", environments[indexNext]);\r",
									"\r",
									"    pm.execution.setNextRequest(\"field Name\");\r",
									"} else {\r",
									"    pm.environment.set(\"envCurrent\", null);\r",
									"    pm.environment.set(\"indexEnv\", null);\r",
									"        pm.environment.set(\"qauto\", null)\r",
									"    console.log(\"Cередовища Dev і Production пройдені\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Масив невалідних значень для ім'я для тестів поза колекцією\r",
									"const invalidNames = [\r",
									"    \"\", \r",
									"    \"A\", \r",
									"    \"NameQwertyuiopasdfghjklzxqq2005\", \r",
									"    \"Олексій\", \r",
									"    \"Alex2005!\"\r",
									"];\r",
									"\r",
									"let fileName = pm.iterationData.get(\"name\");\r",
									"let randomInvalidName = invalidNames[Math.floor(Math.random() * invalidNames.length)];\r",
									"let userName;\r",
									"\r",
									"// Якщо тест запускається через колекцію, використовуємо значення з файлу\r",
									"if (fileName) {\r",
									"    userName = fileName;\r",
									"   \r",
									"} else {\r",
									"// Якщо тест виконується поза колекцією, встановлюємо випадкове невалідне ім'я\r",
									"    userName = randomInvalidName;\r",
									"}\r",
									"let userLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
									"let email = pm.variables.replaceIn(\"{{$randomEmail}}\"); \r",
									"let password = generatePassword();\r",
									"\r",
									"pm.environment.set(\"userName\", userName)\r",
									"pm.environment.set(\"userLastName\", userLastName);\r",
									"pm.environment.set(\"email\", email);  \r",
									"pm.environment.set(\"password\", password); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{userName}}\",\r\n  \"lastName\": \"{{userLastName}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{qauto}}/auth/signup",
							"host": [
								"{{qauto}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Масив середовищ\r",
							"const environments = [\"Dev\", \"Production\"];\r",
							"\r",
							"// Ініціалізація змінної у випадку її відсутності\r",
							"if (!pm.environment.has(\"indexEnv\")) {\r",
							"    pm.environment.set(\"indexEnv\", 0);\r",
							"}\r",
							"// Поточний індекс середовища\r",
							"let indexEnv = Number(pm.environment.get(\"indexEnv\"));\r",
							"\r",
							"let currentEnv = environments[indexEnv];\r",
							"pm.environment.set(\"envCurrent\", currentEnv);\r",
							"\r",
							"\r",
							"\r",
							"if (currentEnv === \"Dev\") {\r",
							"    pm.environment.set(\"qauto\", \"https://qauto2.forstudy.space/api\");\r",
							"} else if (currentEnv === \"Production\") {\r",
							"    pm.environment.set(\"qauto\", \"https://qauto.forstudy.space/api\");\r",
							"}\r",
							"\r",
							"let iterationNumber = pm.info.iteration;\r",
							"\r",
							"// Виводимо лог для перевірки\r",
							"console.log(\"Поточне середовище:\", currentEnv);\r",
							"console.log(\"Поточна ітерація:\", iterationNumber);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//Генерація пароля відповідно до вимоги \"min = 8, max = 15 symbols, minimum 1 integer 1 capital letter and one small letter\"\r",
					"generatePassword = function generatePassword() {\r",
					"    const length = Math.floor(Math.random() * (15 - 8 + 1)) + 8; // Длина от 8 до 15\r",
					"    const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
					"    const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
					"    const numbers = \"0123456789\";\r",
					"    const allSymbol = uppercase + lowercase + numbers;\r",
					"    \r",
					"    let password = \"\";\r",
					"    \r",
					"    // Гарантируем наличие хотя бы одной заглавной буквы, одной строчной и одной цифры\r",
					"    password += uppercase[Math.floor(Math.random() * uppercase.length)];\r",
					"    password += lowercase[Math.floor(Math.random() * lowercase.length)];\r",
					"    password += numbers[Math.floor(Math.random() * numbers.length)];\r",
					"    \r",
					"    for (let i = 3; i < length; i++) {\r",
					"        password += allSymbol[Math.floor(Math.random() * allSymbol.length)];\r",
					"    }\r",
					"           \r",
					"    return password;\r",
					"}\r",
					"\r",
					"//console.log(generatePassword());\r",
					"\r",
					"// // Масив середовищ\r",
					"// const environments = [\"Dev\", \"Production\"];\r",
					"\r",
					"// // Ініціалізація змінної у випадку її відсутності\r",
					"// if (!pm.environment.has(\"indexEnv\")) {\r",
					"//     pm.environment.set(\"indexEnv\", 0);\r",
					"// }\r",
					"\r",
					"// // Поточний індекс середовища\r",
					"// let indexEnv = Number(pm.environment.get(\"indexEnv\"));\r",
					" \r",
					"// //Якщо запит виконується поза колекцією\r",
					"// let iterationNumber = pm.info.iteration;\r",
					"// //if (!pm.info.iterationCount || pm.info.iterationCount === 1) {\r",
					"// if (!iterationNumber){\r",
					"//     console.log(pm.infoiteration)\r",
					"//     console.log(\"Запит виконується вручну, середовище не змінюється.\");\r",
					"// } else {\r",
					"//     // Якщо запит виконується в колекції\r",
					"//     let currentEnv = environments[indexEnv];\r",
					"//     pm.environment.set(\"envCurrent\", currentEnv);\r",
					"\r",
					"//     if (currentEnv === \"Dev\") {\r",
					"//         pm.environment.set(\"qauto\", \"https://qauto2.forstudy.space/api\");\r",
					"//     } else if (currentEnv === \"Production\") {\r",
					"//         pm.environment.set(\"qauto\", \"https://qauto.forstudy.space/api\");\r",
					"//     }\r",
					"\r",
					"//     console.log(\"Поточне середовище:\", currentEnv);\r",
					"// }\r",
					"// // Визначення поточної ітерації\r",
					"// console.log(\"Поточна ітерація:\", iterationNumber);\r",
					"\r",
					"// // Встановлення `skipPositiveTests` для пропуску позитивних тестів після першої ітерації\r",
					"// if (iterationNumber === 0) {\r",
					"//     pm.environment.set(\"skipPositiveTests\", false);\r",
					"// } else {\r",
					"//     pm.environment.set(\"skipPositiveTests\", true);\r",
					"// }"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}